import numbers

import matplotlib



# matplotlib.use('agg')
import matplotlib.pyplot \
     as plt

# matplotlib.use('agg')
import numpy as np

# 生成 x 值（假设共有150个数据点）
x_values = np.linspace(1, 150, 150)

def moving_average(data, window_size):
    """计算移动平均"""
    return np.convolve(data, np.ones(window_size)/window_size, mode='valid')

def normalize(data, original_min, original_max, new_min, new_max):
    """将数据归一化到指定的范围"""
    return [(x - original_min) / (original_max - original_min) * (new_max - new_min) + new_min for x in data]

def smooth_data(y1_values, window_size):
    """对数据进行平滑处理，并保持最大最小值不变"""
    # 计算移动平均
    smoothed_values = moving_average(y1_values, window_size)

    # 保持最大值和最小值不变
    original_min = min(y1_values)
    original_max = max(y1_values)
    smoothed_min = min(smoothed_values)
    smoothed_max = max(smoothed_values)

    # 归一化
    smoothed_values_normalized = normalize(smoothed_values, smoothed_min, smoothed_max, original_min, original_max)

    # 填充数据长度，使其与原始数据长度一致
    padded_smoothed_values = np.concatenate([np.repeat(original_min, window_size-1), smoothed_values_normalized])

    return padded_smoothed_values
# a = [1, 2, 3] 不用学了 爱你❤️


# 生成四组逐渐上升的 y 值
y1_values = [
    0.4299, 0.4336, 0.4462, 0.4502, 0.4830, 0.5683, 0.5970, 0.6122, 0.6350, 0.6453,
    0.6681, 0.6767, 0.6889, 0.6969, 0.6998, 0.7005, 0.7041, 0.7094, 0.7101, 0.7081,
    0.7114, 0.7180, 0.7193, 0.7319, 0.7421, 0.7448, 0.7712, 0.7765, 0.7841, 0.7874,
    0.7927, 0.7964, 0.7964, 0.7947, 0.8003, 0.8040, 0.8050, 0.8040, 0.8079, 0.8145,
    0.8159, 0.8155, 0.8188, 0.8235, 0.8231, 0.8198, 0.8228, 0.8241, 0.8231, 0.8258,
    0.8298, 0.8281, 0.8288, 0.8261, 0.8311, 0.8327, 0.8294, 0.8344, 0.8324, 0.8327,
    0.8334, 0.8327, 0.8324, 0.8274, 0.8327, 0.8294, 0.8344, 0.8324, 0.8327, 0.8334,
    0.8327, 0.8324, 0.8274, 0.8354, 0.8294, 0.8324, 0.8298, 0.8298, 0.8307, 0.8377,
    0.8344, 0.8331, 0.8327, 0.8321, 0.8354, 0.8337, 0.8357, 0.8337, 0.8367, 0.8347,
    0.8354, 0.8347, 0.8337, 0.8420, 0.8424, 0.8377, 0.8334, 0.8344, 0.8347, 0.8311,
    0.8307, 0.8291, 0.8314, 0.8424, 0.8364, 0.8321, 0.8340, 0.8291, 0.8340, 0.8317,
    0.8354, 0.8345, 0.8370, 0.8421, 0.8457, 0.8431, 0.8547, 0.8564, 0.8567, 0.8644,
    0.8674, 0.8600, 0.8744, 0.8662, 0.8664, 0.8686, 0.8592, 0.8599, 0.8550, 0.8557,
    0.8580, 0.8557, 0.8611, 0.8631, 0.8620, 0.8707, 0.8763, 0.8597, 0.8644, 0.8687,
    0.8575, 0.8572, 0.8628, 0.8588, 0.8612, 0.8592, 0.8655, 0.8658, 0.8631, 0.8664,
]  # 请手动填写150个数值


import numpy as np

# 原始数据
y1_values = [
    0.4299, 0.4336, 0.4462, 0.4502, 0.4830, 0.5683, 0.5970, 0.6122, 0.6350, 0.6453,
    0.6681, 0.6767, 0.6889, 0.6969, 0.6998, 0.7005, 0.7041, 0.7094, 0.7101, 0.7081,
    0.7114, 0.7180, 0.7193, 0.7319, 0.7421, 0.7448, 0.7712, 0.7765, 0.7841, 0.7874,
    0.7927, 0.7964, 0.7964, 0.7947, 0.8003, 0.8040, 0.8050, 0.8040, 0.8079, 0.8145,
    0.8159, 0.8155, 0.8188, 0.8235, 0.8231, 0.8198, 0.8228, 0.8241, 0.8231, 0.8258,
    0.8298, 0.8281, 0.8288, 0.8261, 0.8311, 0.8327, 0.8294, 0.8344, 0.8324, 0.8327,
    0.8334, 0.8327, 0.8324, 0.8274, 0.8327, 0.8294, 0.8344, 0.8324, 0.8327, 0.8334,
    0.8327, 0.8324, 0.8274, 0.8354, 0.8294, 0.8324, 0.8298, 0.8298, 0.8307, 0.8377,
    0.8344, 0.8331, 0.8327, 0.8321, 0.8354, 0.8337, 0.8357, 0.8337, 0.8367, 0.8347,
    0.8354, 0.8347, 0.8337, 0.8420, 0.8424, 0.8377, 0.8334, 0.8344, 0.8347, 0.8311,
    0.8307, 0.8291, 0.8314, 0.8424, 0.8364, 0.8321, 0.8340, 0.8291, 0.8340, 0.8317,
    0.8354, 0.8345, 0.8370, 0.8421, 0.8457, 0.8431, 0.8547, 0.8564, 0.8567, 0.8644,
    0.8674, 0.8600, 0.8744, 0.8662, 0.8664, 0.8686, 0.8592, 0.8599, 0.8550, 0.8557,
    0.8580, 0.8557, 0.8611, 0.8631, 0.8620, 0.8707, 0.8763, 0.8597, 0.8644, 0.8687,
    0.8575, 0.8572, 0.8628, 0.8588, 0.8612, 0.8592, 0.8655, 0.8658, 0.8631, 0.8664,
]






y2_values = [
    0.3960, 0.4243, 0.4163, 0.4163, 0.4126, 0.4083, 0.4086, 0.4086, 0.4129, 0.4261,
    0.4380, 0.4496, 0.4707, 0.5051, 0.5131, 0.5263, 0.5359, 0.5428, 0.5544, 0.5835,
    0.6152, 0.6403, 0.6711, 0.6932, 0.7058, 0.7164, 0.7243, 0.7369, 0.7435, 0.7488,
    0.7531, 0.7600, 0.7583, 0.7617, 0.7669, 0.7815, 0.7795, 0.7815, 0.7934, 0.7884,
    0.7669, 0.7772, 0.7944, 0.7931, 0.7967, 0.8046, 0.8106, 0.8179, 0.8175, 0.8245,
    0.8212, 0.8261, 0.8238, 0.8317, 0.8331, 0.8374, 0.8403, 0.8407, 0.8403, 0.8433,
    0.8331, 0.8367, 0.8326, 0.8306, 0.8279, 0.8205, 0.8245, 0.8212, 0.8261, 0.8238,
    0.8222, 0.8109, 0.8196, 0.8212, 0.8136, 0.8320, 0.8237, 0.8270, 0.8257, 0.8357,
    0.8360, 0.8350, 0.8274, 0.8250, 0.8393, 0.8380, 0.8367, 0.8363, 0.8370, 0.8380,
    0.8218, 0.8241, 0.8364, 0.8238, 0.8387, 0.8317, 0.8327, 0.8330, 0.8354, 0.8327,
    0.8327, 0.8410, 0.8344, 0.8327, 0.8407, 0.8333, 0.8420, 0.8490, 0.8354, 0.8387,
    0.8377, 0.8390, 0.8456, 0.8407, 0.8554, 0.8547, 0.8541, 0.8534, 0.8619, 0.8600,
    0.8374, 0.8355, 0.8382, 0.8380, 0.8334, 0.8357, 0.8410, 0.8377, 0.8387, 0.8317,
    0.8511, 0.8447, 0.8645, 0.8380, 0.8434, 0.8357, 0.8410, 0.8377, 0.8387, 0.8317,
    0.8367, 0.8393, 0.8340, 0.8480, 0.8334, 0.8457, 0.8410, 0.8523, 0.8603, 0.8612,

]
y3_values = [
    0.4203, 0.3974, 0.3974, 0.4003, 0.4076, 0.4086, 0.4109, 0.4122, 0.4142, 0.4192,
    0.4466, 0.4664, 0.6033, 0.6264, 0.6615, 0.6767, 0.6926, 0.7074, 0.7137, 0.7210,
    0.7302, 0.7339, 0.7336, 0.7345, 0.7332, 0.7332, 0.7369, 0.7409, 0.7888, 0.8017,
    0.7795, 0.7815, 0.7934, 0.7884, 0.7974, 0.7974, 0.7922, 0.7933, 0.8096, 0.8012,
    0.8096, 0.7917, 0.7869, 0.7815, 0.7795, 0.7815, 0.7934, 0.7884, 0.7974, 0.7974,
    0.7922, 0.8009, 0.8096, 0.8212, 0.8036, 0.8340, 0.8337, 0.8370, 0.8357, 0.8357,
    0.8360, 0.8350, 0.8374, 0.8350, 0.8393, 0.8380, 0.8367, 0.8393, 0.8370, 0.8380,
    0.8334, 0.8357, 0.8410, 0.8377, 0.8287, 0.8327, 0.8200, 0.8283, 0.8297, 0.8344,
    0.8327, 0.8310, 0.8344, 0.8327, 0.8407, 0.8433, 0.8420, 0.8390, 0.8354, 0.8367,
    0.8377, 0.8290, 0.8156, 0.8207, 0.8304, 0.8314, 0.8333, 0.8434, 0.8367, 0.8370,
    0.8367, 0.8393, 0.8370, 0.8380, 0.8223, 0.8257, 0.8210, 0.8277, 0.8387, 0.8317,
    0.8367, 0.8393, 0.8370, 0.8380, 0.8334, 0.8357, 0.8410, 0.8293, 0.8299, 0.8286,
    0.8269, 0.8309, 0.8417, 0.8473, 0.8476, 0.8476, 0.8469, 0.8486, 0.8486, 0.8486,
    0.8274, 0.8574, 0.8509, 0.8511, 0.8524, 0.8446, 0.8392, 0.8299, 0.8350, 0.8357,
    0.8367, 0.8393, 0.8370, 0.8380, 0.8334, 0.8357, 0.8410, 0.8317, 0.8427, 0.8438,
]

y4_values = [
    0.4027, 0.4129, 0.4288, 0.4031, 0.4299, 0.4450, 0.4626, 0.5024, 0.5555, 0.6231,
    0.6707, 0.7002, 0.7083, 0.7154, 0.7217, 0.7301, 0.7475, 0.7425, 0.7319, 0.7309,
    0.7312, 0.7291, 0.7453, 0.7395, 0.7396, 0.7317, 0.7369, 0.7415, 0.7695, 0.7815,
    0.7699, 0.7689, 0.7449, 0.7628, 0.7828, 0.7821, 0.7910, 0.7907, 0.7868, 0.7868,
    0.7855, 0.7979, 0.8031, 0.7997, 0.8102, 0.8108, 0.8155, 0.8182, 0.8109, 0.8116,
    0.7922, 0.8009, 0.8096, 0.8212, 0.8036, 0.8340, 0.8337, 0.8370, 0.8357, 0.8357,
    0.8360, 0.8350, 0.8374, 0.8350, 0.8393, 0.8380, 0.8367, 0.8393, 0.8370, 0.8380,
    0.8334, 0.8357, 0.8410, 0.8377, 0.8287, 0.8327, 0.8200, 0.8283, 0.8297, 0.8344,
    0.8327, 0.8310, 0.8344, 0.8327, 0.8407, 0.8433, 0.8420, 0.8390, 0.8354, 0.8367,
    0.8377, 0.8290, 0.8056, 0.8207, 0.8304, 0.8314, 0.8343, 0.8434, 0.8367, 0.8370,
    0.8367, 0.8393, 0.8370, 0.8380, 0.8423, 0.8257, 0.8210, 0.8277, 0.8387, 0.8317,
    0.8367, 0.8393, 0.8370, 0.8380, 0.8334, 0.8357, 0.8410, 0.8193, 0.8299, 0.8286,
    0.8269, 0.8309, 0.8417, 0.8473, 0.8476, 0.8476, 0.8469, 0.8486, 0.8486, 0.8486,
    0.8274, 0.8500, 0.8516, 0.8386, 0.8584, 0.8586, 0.8382, 0.8299, 0.8350, 0.8357,
    0.8367, 0.8393, 0.8470, 0.8380, 0.8434, 0.8457, 0.8410, 0.8377, 0.8487, 0.8488,
]

ck = 5
# 归一化
y1_values = smooth_data(y1_values,ck)

y2_values = smooth_data(y2_values,ck)

y3_values = smooth_data(y3_values,ck)

y4_values = smooth_data(y4_values,ck)

plt.rcParams.update({'font.size': 12})  # 根据需要设置合适的字体大小




fig = plt.figure(figsize=(6, 5))
# 绘制四条线
plt.plot(x_values, y1_values, label='SC-HGNN', linestyle='-', color='#FF8227', marker='s', markevery=15)
plt.plot(x_values, y2_values, label='SC-HGNN-NOS1', linestyle='-', color='#004113', marker='s', markevery=15)
plt.plot(x_values, y3_values, label='SC-HGNN-NOS2', linestyle='--', color='#7c6c56', marker='s',markevery=15)
plt.plot(x_values, y4_values, label='SC-HGNN-NOS3', color="#1615f3", linestyle='--',markevery=15,marker='s')

plt.legend(loc='lower right')

plt.ylim(0.35, 0.9)



# 添加图例

# plt.gca().set_aspect('equal', adjustable='box')

ax = plt.gca()

# 设置坐标轴框的线宽度
ax.spines['top'].set_linewidth(2)
ax.spines['bottom'].set_linewidth(2)
ax.spines['left'].set_linewidth(2)
ax.spines['right'].set_linewidth(2)
# fig = plt.figure(figsize=(8, 15))
plt.xlabel('Epoch',fontweight='bold')
plt.ylabel('Accuracy(Reentrancy)',fontweight='bold')



plt.savefig(f'{ck}.png',dpi=1200)
# 显示图形
plt.show()




